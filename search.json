[
  {
    "objectID": "backend.html",
    "href": "backend.html",
    "title": "BACKEND",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "devops.html",
    "href": "devops.html",
    "title": "Devops",
    "section": "",
    "text": "Propósito: GitHub es la plataforma de control de versiones más popular, ideal para proyectos colaborativos de desarrollo de software.\nUso en DevOps:\n\nGestión de código fuente: Los desarrolladores de backend y frontend suben su código aquí.\nIntegración continua (CI): Puedes configurar un flujo de trabajo de integración continua (CI) usando Jenkins o GitHub Actions para que cuando se haga un “push” al repositorio, se ejecute un conjunto de pruebas o se construya automáticamente el proyecto.\nBranching: El uso de ramas (branching) es clave para que cada equipo pueda trabajar de forma aislada en sus propias características sin interferir entre sí.\n\nPor que elegir Github\n\nMayor adopción: GitHub es una de las plataformas de repositorios Git más utilizadas, lo que garantiza un ecosistema robusto con muchas integraciones de herramientas.\nFacilidad de colaboración: Su interfaz intuitiva, la facilidad para realizar “pull requests” y la gran comunidad hacen que GitHub sea una opción muy conveniente para equipos de desarrollo.\nIntegraciones CI/CD: GitHub tiene integraciones nativas con herramientas como GitHub Actions y otros servicios de CI/CD, lo que facilita el flujo de trabajo DevOps.\n\nComparación con otras plataformas:\n\nGitLab y Bitbucket GitLab también ofrece buenas características de CI/CD integradas, pero GitHub tiene una mayor adopción en la industria y una comunidad más activa. Bitbucket, aunque fuerte en equipos de Atlassian, tiene menos integraciones.\n\n\n\n\n\n\n\nPropósito: Jenkins es una herramienta de automatización de código abierto que facilita la integración continua (CI) y la entrega continua (CD), permitiendo que el código se construya, se pruebe y se despliegue automáticamente.\nUso en DevOps:\n\nCI/CD Pipeline: Configura un pipeline en Jenkins para que cada vez que se suban cambios al repositorio de GitHub, se inicie un proceso automático para compilar, probar y desplegar la aplicación.\nPruebas automáticas: Se pueden ejecutar pruebas de unidad, pruebas de integración y pruebas end-to-end (E2E) dentro del pipeline.\nDespliegue a AWS: Después de que el código pase las pruebas, puedes usar Jenkins para hacer el despliegue automático de la aplicación a AWS.\n\nPor que elegir Jenkins\n\nFlexibilidad Jenkins es altamente personalizable y tiene soporte para una amplia variedad de plugins y integraciones con otras herramientas.\nPopularidad: Es una de las herramientas de CI/CD más utilizadas, lo que asegura una gran comunidad de soporte.\nAutomatización: Permite la automatización de pruebas, compilación y despliegue, lo que es esencial para mantener la calidad del software en proyectos de DevOps.\n\nComparación con otras herramientas:\n\nGitLab CI/CD: GitLab tiene una integración nativa de CI/CD, eliminando la necesidad de configurar un servidor separado como Jenkins. Sin embargo, Jenkins sigue siendo más flexible y tiene una mayor cantidad de plugins.\nCircleCI o Travis CI: Son alternativas más fáciles de usar, pero Jenkins ofrece más control sobre el proceso y más opciones de personalización.\n\n\n\n\n\n\n\nPropósito: Docker es una plataforma que permite crear, desplegar y ejecutar aplicaciones en contenedores. Un contenedor incluye todo lo necesario para ejecutar una aplicación (código, dependencias, configuraciones, etc.).\nUso en DevOps:\n\nContenerización de aplicaciones: Tanto el backend como el frontend pueden ser “contenedorizados” para asegurarse de que se ejecuten de la misma manera en cualquier entorno.\nDockerfiles: Crear un Dockerfile para cada aplicación (backend y frontend) que defina cómo construir la imagen del contenedor.\nDespliegue consistente: El uso de Docker asegura que el código se ejecutará de manera consistente en diferentes entornos (desarrollo, pruebas, producción).\nAislamiento de servicios: Puedes tener diferentes contenedores para servicios de backend y frontend, y asegurarte de que no haya interferencia entre ellos.\n\nPor qué elegir Docker:\n\nPortabilidad: Docker asegura que tu aplicación funcione de manera consistente en todos los entornos (desarrollo, prueba, producción).\nAislamiento: Permite que el backend y frontend de una aplicación se ejecuten de forma aislada, sin interferencias entre ellos.\nEscalabilidad: Docker facilita la gestión de aplicaciones a gran escala, al ser ligero y eficiente.\n\nComparación con otras tecnologías:\n\nKubernetes: Aunque Kubernetes también puede gestionar contenedores a escala, Docker es más simple y directo cuando se trata de contenerización.\nVMs: Las máquinas virtuales pueden ofrecer aislamiento similar, pero son más pesadas y menos eficientes que los contenedores, lo que hace que Docker sea una opción preferible en términos de rendimiento y flexibilidad.\n\n\n\n\n\n\n\nPropósito: AWS (Amazon Web Services) es un conjunto de servicios en la nube que te permite gestionar recursos como servidores, bases de datos, redes y almacenamiento de manera flexible y escalable.\nUso en DevOps:\n\nElastic Container Service (ECS): Puedes usar ECS para gestionar contenedores Docker en AWS. ECS te permite ejecutar, detener y gestionar clústeres de contenedores.\nElastic Container Registry (ECR): Es un repositorio privado de contenedores Docker. Puedes almacenar las imágenes Docker que generes (por ejemplo, en Jenkins) y luego utilizar ECS para desplegar esas imágenes en producción.\nInfraestructura escalable: AWS permite que la infraestructura escale según la demanda, por lo que tus aplicaciones podrán manejar un aumento de tráfico sin intervención manual.\n\nPor qué elegir AWS:\n\nEscalabilidad y flexibilidad: AWS permite que tu infraestructura escale según la demanda, sin intervención manual. Además, ofrece un amplio abanico de servicios para gestionar contenedores, bases de datos y redes.\nIntegración con herramientas DevOps: AWS tiene integraciones nativas con Jenkins, Docker y otras herramientas populares de DevOps, facilitando la automatización de procesos.\nServicios específicos para DevOps: AWS tiene servicios dedicados a DevOps, como Elastic Beanstalk, ECS, ECR y CloudWatch, que mejoran la gestión y monitoreo de aplicaciones.\n\nComparación con otras plataformas en la nube:\n\nGoogle Cloud Platform (GCP) y Microsoft Azure: Ambos ofrecen servicios similares para gestionar Kubernetes, contenedores y escalabilidad. Sin embargo, AWS es la opción más popular en la industria, con una mayor cantidad de servicios y mejor soporte para DevOps.\n\n\n\n\n\n\n\nDesarrollo:\n\nLos desarrolladores trabajan en sus ramas individuales en GitHub y luego envían sus cambios a la rama principal.\n\nCI/CD con Jenkins:\n\nJenkins se integra con GitHub y, al recibir un cambio en la rama principal, inicia el pipeline de integración continua.\nEn el pipeline se compila, prueba y crea la imagen del contenedor Docker.\nSi todas las pruebas pasan, Jenkins empuja la imagen Docker a ECR (repositorio de contenedores en AWS).\n\nDespliegue en AWS:\n\nLas imágenes Docker generadas por Jenkins se almacenan en ECR, y ECS se encarga de ejecutar esas imágenes en producción.\n\nMonitoreo y Escalado:\n\nAWS CloudWatch y Auto Scaling permiten monitorear el rendimiento y escalar automáticamente la infraestructura según el tráfico.\n\n\n\n\nConclusión: GitHub para control de versiones, Jenkins para CI/CD, Docker para contenerización y AWS para la infraestructura solución poderosa y flexible para proyectos de DevOps."
  },
  {
    "objectID": "devops.html#github-control-de-versiones-y-colaboración",
    "href": "devops.html#github-control-de-versiones-y-colaboración",
    "title": "Devops",
    "section": "",
    "text": "Propósito: GitHub es la plataforma de control de versiones más popular, ideal para proyectos colaborativos de desarrollo de software.\nUso en DevOps:\n\nGestión de código fuente: Los desarrolladores de backend y frontend suben su código aquí.\nIntegración continua (CI): Puedes configurar un flujo de trabajo de integración continua (CI) usando Jenkins o GitHub Actions para que cuando se haga un “push” al repositorio, se ejecute un conjunto de pruebas o se construya automáticamente el proyecto.\nBranching: El uso de ramas (branching) es clave para que cada equipo pueda trabajar de forma aislada en sus propias características sin interferir entre sí.\n\nPor que elegir Github\n\nMayor adopción: GitHub es una de las plataformas de repositorios Git más utilizadas, lo que garantiza un ecosistema robusto con muchas integraciones de herramientas.\nFacilidad de colaboración: Su interfaz intuitiva, la facilidad para realizar “pull requests” y la gran comunidad hacen que GitHub sea una opción muy conveniente para equipos de desarrollo.\nIntegraciones CI/CD: GitHub tiene integraciones nativas con herramientas como GitHub Actions y otros servicios de CI/CD, lo que facilita el flujo de trabajo DevOps.\n\nComparación con otras plataformas:\n\nGitLab y Bitbucket GitLab también ofrece buenas características de CI/CD integradas, pero GitHub tiene una mayor adopción en la industria y una comunidad más activa. Bitbucket, aunque fuerte en equipos de Atlassian, tiene menos integraciones."
  },
  {
    "objectID": "devops.html#jenkins-automatización-de-cicd",
    "href": "devops.html#jenkins-automatización-de-cicd",
    "title": "Devops",
    "section": "",
    "text": "Propósito: Jenkins es una herramienta de automatización de código abierto que facilita la integración continua (CI) y la entrega continua (CD), permitiendo que el código se construya, se pruebe y se despliegue automáticamente.\nUso en DevOps:\n\nCI/CD Pipeline: Configura un pipeline en Jenkins para que cada vez que se suban cambios al repositorio de GitHub, se inicie un proceso automático para compilar, probar y desplegar la aplicación.\nPruebas automáticas: Se pueden ejecutar pruebas de unidad, pruebas de integración y pruebas end-to-end (E2E) dentro del pipeline.\nDespliegue a AWS: Después de que el código pase las pruebas, puedes usar Jenkins para hacer el despliegue automático de la aplicación a AWS.\n\nPor que elegir Jenkins\n\nFlexibilidad Jenkins es altamente personalizable y tiene soporte para una amplia variedad de plugins y integraciones con otras herramientas.\nPopularidad: Es una de las herramientas de CI/CD más utilizadas, lo que asegura una gran comunidad de soporte.\nAutomatización: Permite la automatización de pruebas, compilación y despliegue, lo que es esencial para mantener la calidad del software en proyectos de DevOps.\n\nComparación con otras herramientas:\n\nGitLab CI/CD: GitLab tiene una integración nativa de CI/CD, eliminando la necesidad de configurar un servidor separado como Jenkins. Sin embargo, Jenkins sigue siendo más flexible y tiene una mayor cantidad de plugins.\nCircleCI o Travis CI: Son alternativas más fáciles de usar, pero Jenkins ofrece más control sobre el proceso y más opciones de personalización."
  },
  {
    "objectID": "devops.html#docker-contenerización",
    "href": "devops.html#docker-contenerización",
    "title": "Devops",
    "section": "",
    "text": "Propósito: Docker es una plataforma que permite crear, desplegar y ejecutar aplicaciones en contenedores. Un contenedor incluye todo lo necesario para ejecutar una aplicación (código, dependencias, configuraciones, etc.).\nUso en DevOps:\n\nContenerización de aplicaciones: Tanto el backend como el frontend pueden ser “contenedorizados” para asegurarse de que se ejecuten de la misma manera en cualquier entorno.\nDockerfiles: Crear un Dockerfile para cada aplicación (backend y frontend) que defina cómo construir la imagen del contenedor.\nDespliegue consistente: El uso de Docker asegura que el código se ejecutará de manera consistente en diferentes entornos (desarrollo, pruebas, producción).\nAislamiento de servicios: Puedes tener diferentes contenedores para servicios de backend y frontend, y asegurarte de que no haya interferencia entre ellos.\n\nPor qué elegir Docker:\n\nPortabilidad: Docker asegura que tu aplicación funcione de manera consistente en todos los entornos (desarrollo, prueba, producción).\nAislamiento: Permite que el backend y frontend de una aplicación se ejecuten de forma aislada, sin interferencias entre ellos.\nEscalabilidad: Docker facilita la gestión de aplicaciones a gran escala, al ser ligero y eficiente.\n\nComparación con otras tecnologías:\n\nKubernetes: Aunque Kubernetes también puede gestionar contenedores a escala, Docker es más simple y directo cuando se trata de contenerización.\nVMs: Las máquinas virtuales pueden ofrecer aislamiento similar, pero son más pesadas y menos eficientes que los contenedores, lo que hace que Docker sea una opción preferible en términos de rendimiento y flexibilidad."
  },
  {
    "objectID": "devops.html#aws-infraestructura-como-servicio",
    "href": "devops.html#aws-infraestructura-como-servicio",
    "title": "Devops",
    "section": "",
    "text": "Propósito: AWS (Amazon Web Services) es un conjunto de servicios en la nube que te permite gestionar recursos como servidores, bases de datos, redes y almacenamiento de manera flexible y escalable.\nUso en DevOps:\n\nElastic Container Service (ECS): Puedes usar ECS para gestionar contenedores Docker en AWS. ECS te permite ejecutar, detener y gestionar clústeres de contenedores.\nElastic Container Registry (ECR): Es un repositorio privado de contenedores Docker. Puedes almacenar las imágenes Docker que generes (por ejemplo, en Jenkins) y luego utilizar ECS para desplegar esas imágenes en producción.\nInfraestructura escalable: AWS permite que la infraestructura escale según la demanda, por lo que tus aplicaciones podrán manejar un aumento de tráfico sin intervención manual.\n\nPor qué elegir AWS:\n\nEscalabilidad y flexibilidad: AWS permite que tu infraestructura escale según la demanda, sin intervención manual. Además, ofrece un amplio abanico de servicios para gestionar contenedores, bases de datos y redes.\nIntegración con herramientas DevOps: AWS tiene integraciones nativas con Jenkins, Docker y otras herramientas populares de DevOps, facilitando la automatización de procesos.\nServicios específicos para DevOps: AWS tiene servicios dedicados a DevOps, como Elastic Beanstalk, ECS, ECR y CloudWatch, que mejoran la gestión y monitoreo de aplicaciones.\n\nComparación con otras plataformas en la nube:\n\nGoogle Cloud Platform (GCP) y Microsoft Azure: Ambos ofrecen servicios similares para gestionar Kubernetes, contenedores y escalabilidad. Sin embargo, AWS es la opción más popular en la industria, con una mayor cantidad de servicios y mejor soporte para DevOps."
  },
  {
    "objectID": "devops.html#objetivo-del-flujo-de-trabajo-devops-propuesto",
    "href": "devops.html#objetivo-del-flujo-de-trabajo-devops-propuesto",
    "title": "Devops",
    "section": "",
    "text": "Desarrollo:\n\nLos desarrolladores trabajan en sus ramas individuales en GitHub y luego envían sus cambios a la rama principal.\n\nCI/CD con Jenkins:\n\nJenkins se integra con GitHub y, al recibir un cambio en la rama principal, inicia el pipeline de integración continua.\nEn el pipeline se compila, prueba y crea la imagen del contenedor Docker.\nSi todas las pruebas pasan, Jenkins empuja la imagen Docker a ECR (repositorio de contenedores en AWS).\n\nDespliegue en AWS:\n\nLas imágenes Docker generadas por Jenkins se almacenan en ECR, y ECS se encarga de ejecutar esas imágenes en producción.\n\nMonitoreo y Escalado:\n\nAWS CloudWatch y Auto Scaling permiten monitorear el rendimiento y escalar automáticamente la infraestructura según el tráfico.\n\n\n\n\nConclusión: GitHub para control de versiones, Jenkins para CI/CD, Docker para contenerización y AWS para la infraestructura solución poderosa y flexible para proyectos de DevOps."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]